---
# Install Patroni Cluster for RHEL or CentOS 7.x
#
- name: Install rpm packages of firewalld
  become: true
  become_user: root
  yum:
    name: "{{ item }}"
    state: present
  ignore_errors: yes
  register: firewalld_installed
  with_items:
    - firewalld
#    - python-psycopg2
#    - python27-python-psycopg2
#    - python3-policycoreutils
#    - python2-libselinux
#    - libselinux-python2
#    - policycoreutils-python-utils
#    - libselinux-python3

- name: Stop and disable firewalld
  become: true
  systemd:
    name: firewalld
    state: stopped
    enabled: false

#
- name: Flush iptables rules
  become: true
  become_user: root
  shell: ( iptables -F )
  register: iptables_rules_flushed

#
- name: List iptables rules
  become: true
  become_user: root
  shell: ( iptables -nL )
  register: iptables_rules_listed

- debug: msg={{ iptables_rules_listed.stdout }}
  tags:
    - print_debug

- name: Install the 'Development tools' package group for VMware Postgres Dependencies
  become: true
  yum:
    name: "@Development tools"
    state: present
  async: 360
  poll: 5

- name: Install the perl package for VMware Postgres Dependencies
  become: true
  yum:
    name: "{{ item }}"
    state: present
  async: 360
  poll: 5
  with_items:
    - perl
    - readline-devel
    - libicu-devel
    - perl-libs

#
- name: Copy the vmwawre-postgres rpm file to all hosts in cluster
  copy: src={{ package_name }}-{{ major_version }}.{{ minor_version }}-{{ patch_version }}.{{ rhel_version }}.x86_64.rpm dest=/home/jomoon/{{ package_name }}-{{ major_version }}.{{ minor_version }}-{{ patch_version }}.{{ rhel_version }}.x86_64.rpm mode=0644 owner=jomoon group=jomoon

#
- name: Install VMware Postgres on all hosts as root
  become: true
  yum:
    name: /home/jomoon/{{ package_name }}-{{ major_version }}.{{ minor_version }}-{{ patch_version }}.{{ rhel_version }}.x86_64.rpm
    state: present
  async: 120
  poll: 5

#
- name: Install the etcd and Patroni prerequisites on all three nodes
  become: true
  yum:
    name: "{{ item }}"
    state: present
    skip_broken: yes
  async: 120
  poll: 5
  with_items:
    - python3
    - python3-devel
    - gcc
    - etcd
    - python-psycopg2
    - python3-pip
    - python34-setuptools
    - yamllint
    - daemonize
#    - python27-python-setuptools

#
- name: Install the dependencies of etcd  on all three nodes
  become: true
  become_user: postgres
  template: src=requirements.txt.j2 dest=/var/lib/pgsql/requirements.txt owner=postgres group=postgres mode=644 force=yes
  register: patroni_prereq_installed
  when: inventory_hostname in groups['postgres-ha']

#
- name: Install setuptools rust on all three nodes
  become: true
  become_user: root
  shell: (  export PATH=$PATH:/usr/local/bin && pip3 install setuptools-rust )
  async: 120
  poll: 5
  register: pip3_setuptools_rust_installed
  when: inventory_hostname in groups['postgres-ha']

#
#  become_user: postgres
- name: Install typing pip module on all three nodes
  become: true
  become_user: root
  shell: ( cd /var/lib/pgsql ; export PATH=$PATH:/usr/local/bin && pip3 install typing )
  async: 120
  poll: 5
  register: pip3_typing_installed
  when: inventory_hostname in groups['postgres-ha']

#
- name: Upgrade pip3 version
  become: true
  become_user: root
  shell: (  export PATH=$PATH:/usr/local/bin && pip3 install --upgrade pip )
  async: 120
  poll: 5
  register: pip_upgraded
  when: inventory_hostname in groups['postgres-ha']

#
- name: Install wheel module on all three nodes
  become: true
  become_user: postgres
  shell: ( cd /var/lib/pgsql ; export PATH=$PATH:/usr/local/bin && pip3 install wheel )
  async: 120
  poll: 5
  register: pip3_wheel_installed
  when: inventory_hostname in groups['postgres-ha']

- debug: msg={{ pip3_wheel_installed }}

#
- name: Install pip modules of Patroni prerequisites on all three nodes
  become: true
  become_user: postgres
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install -r /var/lib/pgsql/requirements.txt )
  async: 120
  poll: 5
  register: patroni_prerequisites_verified
  when: inventory_hostname in groups['postgres-ha']

- debug: msg={{ patroni_prerequisites_verified }}

#
- name: Iinstall wheel module on all three nodes
  become: true
  become_user: root
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install wheel )
  async: 120
  poll: 5
  register: pip3_wheel_module_installed
  when:
    - major_version >= 13
    - inventory_hostname in groups['postgres-ha']

- debug: msg={{ pip3_wheel_module_installed }}

- name: Install psycopg2-binary module on all three nodes
  become: true
  become_user: root
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install psycopg2-binary )
  async: 120
  poll: 5
  register: pip3_psycopg2_binary_module_installed
  when:
    - major_version >= 13
    - inventory_hostname in groups['postgres-ha']

- debug: msg={{ pip3_psycopg2_binary_module_installed }}

#
- name: Install pyopenssl modle on all three nodes for {{ package_name }} version
  become: true
  become_user: root
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install pyopenssl )
  async: 120
  poll: 5
  register: pyopenssl_module_installed
  when:
    - major_version >= 14
    - inventory_hostname in groups['postgres-ha']

#
- name: Install pyrsistent modle on all three nodes for {{ package_name }} version
  become: true
  become_user: root
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install pyrsistent==0.16.0 )
  async: 120
  poll: 5
  register: pyrsistent_module_installed
  when:
    - major_version >= 14
    - inventory_hostname in groups['postgres-ha']

#
- name: Install pyopenssl modle on all three nodes for {{ package_name }} version
  become: true
  become_user: root
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install pyopenssl )
  async: 120
  poll: 5
  register: pyopenssl_module_installed
  when:
    - major_version >= 14
    - inventory_hostname in groups['postgres-ha']




#
- name: Install patroni modules on all three nodes for {{ package_name }} version
  become: true
  become_user: root
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install patroni )
  async: 120
  poll: 5
  register: patroni_module_install_verified
  when:
    - major_version >= 13
    - inventory_hostname in groups['postgres-ha']

#
- name: Change the permissions on the /tmp directory
  become: yes
  become_user: root
  file:
    path: /tmp
    state: directory
    mode: 0755
  when: inventory_hostname in groups["postgres-ha"]

#
- name: Create the etcd.yml configuration file for all nodes
  become: true
  become_user: postgres
  template: src=etcd.yml.j2 dest=/var/lib/pgsql/etcd.yml owner=postgres group=postgres mode=644 force=yes
  register: etcd_config_created
  when: inventory_hostname in groups["postgres-ha"]

- debug: msg={{ etcd_config_created }}

#- name: Start up etcd on all nodes
#  become: true
#  become_user: postgres
#  shell: ( etcd --config-file /var/lib/pgsql/etcd.yml > /var/lib/pgsql/etcd_logfile 2>&1 & )
#  async: 1000
#  poll: 0
#  register: etcd_started
#  when: inventory_hostname in groups["postgres-ha"]
#
#- debug: msg={{ etcd_started }}

#
- name: Copy systemd configuration of etcd into /etc/systemd/system
  become: true
  become_user: root
  template: src=etcd.systemd.j2 dest=/etc/systemd/system/etcd.service owner=root group=root mode=644 force=yes
  when: inventory_hostname in groups["postgres-ha"]

#
- name: Reload and start etcd through systemd
  become: true
  systemd:
    daemon_reload: yes
    name: etcd
    enabled: yes
    state: started
  when: inventory_hostname in groups["postgres-ha"]

#
- name: Lists the members and identifies the current Leader.
  become: true
  become_user: postgres
  shell: ( export ETCDCTL_API=3 && etcdctl member list )
  register: members_leader_listed
  when: inventory_hostname in groups["postgres-ha"]

- debug: msg={{ members_leader_listed }}

#
- name: Set data directory for patroni cluster
  become: true
  become_user: postgres
  file: path=/var/lib/pgsql/patroni_data state=directory owner=postgres group=postgres

#
- name: Create the patroni.yml configuration file for all nodes
  become: true
  become_user: postgres
  template: src=patroni.yml.j2 dest=/var/lib/pgsql/patroni.yml owner=postgres group=postgres mode=644 force=yes
  register: patroni_config_created
  when: inventory_hostname in groups["postgres-ha"]

- debug: msg={{ patroni_config_created }}

#
- name: Copy systemd configuration of patroni into /etc/systemd/system
  become: true
  become_user: root
  template: src=patroni.systemd.j2 dest=/etc/systemd/system/patroni.service owner=root group=root mode=644 force=yes
  when: inventory_hostname in groups["postgres-ha"]

# Enable and Start services for patroni
- name: Reload and start systemd service of patroni
  become: true
  systemd:
    daemon_reload: yes
    name: patroni
    enabled: yes
    state: started
  when: inventory_hostname in groups["postgres-ha"]
#  when: inventory_hostname == "postgres-ha01"

#
- name: Pause for 1 minutes to wait for compleiting initializaion of patroni cluster
  pause:
    minutes: 1
  when: inventory_hostname in groups["postgres-ha"]

# Verified
#- name: Run the patronictl command-line utility to view the cluster state with Patroni started on all three nodes,
#  become: true
#  become_user: postgres
#  shell: ( {{ patronictl_path }} -c /var/lib/pgsql/patroni.yml list )
#  register: patroni_listed
#  when: inventory_hostname in groups["postgres-ha"]
#
#- debug: msg={{ patroni_listed }}

#
- name: Remove cluster
  become: true
  become_user: postgres
  ignore_errors: true
  shell: |
    export LC_ALL=en_US.utf-8 && {{ patronictl_path }} -c /var/lib/pgsql/patroni.yml remove vmtz_patroni_cluster <<EOF
    vmtz_patroni_cluster
    Yes I am aware
    EOF
  async: 180
  poll: 5
  register: patroni_removed
  when: inventory_hostname == "co7-node01"

- name: Pause for 1 minutes to wait for compleiting initializaion of patroni cluster
  pause:
    minutes: 1
  when: inventory_hostname in groups["postgres-ha"]

- debug: msg={{ patroni_removed }}

- name: Reinitialize patroni clsuter on all node
  become: true
  become_user: postgres
  ignore_errors: true
  shell: |
    export LC_ALL=en_US.utf-8 && {{ patronictl_path }} -c /var/lib/pgsql/patroni.yml reinit vmtz_patroni_cluster <<EOF
    {{ inventory_hostname }}
    y
    y
    EOF
  async: 180
  poll: 5
  register: patroni_reinitialized
  when: inventory_hostname in groups["postgres-ha"]

- debug: msg={{ patroni_reinitialized }}

#
- name: Pause for 1 minutes to wait for compleiting initializaion of patroni cluster
  pause:
    minutes: 1
  when: inventory_hostname in groups["postgres-ha"]

- debug: msg={{ patroni_reinitialized }}

#
- name: Run the patronictl command-line utility to view the cluster state with Patroni started on all three nodes,
  become: true
  become_user: postgres
  shell: ( export LC_ALL=en_US.utf-8 && {{ patronictl_path }} -c /var/lib/pgsql/patroni.yml list )
  register: patroni_listed
  when: inventory_hostname in groups["postgres-ha"]

- debug: msg={{ patroni_listed }}

